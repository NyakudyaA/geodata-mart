version: "3"

# Common Django template for GeoNode and Celery services below
x-common-django:
  &default-common-django
  image: ${COMPOSE_PROJECT_NAME}_django
  restart: on-failure
  env_file:
    - .env
  volumes:
    - ./geodata:/qgis:z
  depends_on:
    postgres:
      condition: service_healthy
    redis:
      condition: service_healthy

services:
  traefik:
    build:
      context: .
      dockerfile: ./docker/production/traefik/Dockerfile
    image: traefik
    depends_on:
      - django
    volumes:
      - traefik:/etc/traefik/acme:z
    ports:
      - "0.0.0.0:80:80"
      - "0.0.0.0:443:443"
      - "0.0.0.0:5555:5555"
      - "0.0.0.0:9000:9000"
      - "0.0.0.0:9001:9001"

  django:
    <<: *default-common-django
    build:
      context: .
      dockerfile: ./docker/production/Dockerfile
    container_name: django4${COMPOSE_PROJECT_NAME}
    platform: linux/x86_64
    command: /start

  postgres:
    image: kartoza/postgis:${POSTGRES_MAJOR_VERSION}-${POSTGIS_MAJOR_VERSION}.${POSTGIS_MINOR_RELEASE}
    volumes:
      - db-data:/var/lib/postgresql
      - db-backups:/backups
    env_file:
      - .env
    restart: on-failure
    healthcheck:
      test: "exit 0"

  dbbackups:
    image: kartoza/pg-backup:${POSTGRES_MAJOR_VERSION}-${POSTGIS_MAJOR_VERSION}.${POSTGIS_MINOR_RELEASE}
    hostname: pg-backups
    volumes:
      - db-backups:/backups
    environment:
      - DUMPPREFIX=PG_db
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASS=${POSTGRES_PASS}
      - POSTGRES_PORT=${POSTGRES_SERVICE_PORT}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DBNAME=${POSTGRES_DB}
      - REMOVE_BEFORE=30
    restart: on-failure
    depends_on:
      postgres:
        condition: service_healthy

  redis:
    image: redis:6
    container_name: redis
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 1s
      timeout: 3s
      retries: 5

  celeryworker:
    build:
      context: .
      dockerfile: ./docker/production/CeleryWorker
    platform: linux/x86_64
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ./geodata:/qgis:z
    env_file:
      - .env
    command: /start-celeryworker
    deploy:
      mode: replicated
      replicas: 6

  celerybeat:
    <<: *default-common-django
    image: ${COMPOSE_PROJECT_NAME}_django
    container_name: celerybeat${COMPOSE_PROJECT_NAME}
    command: /start-celerybeat
    restart: unless-stopped

  flower:
    <<: *default-common-django
    image: ${COMPOSE_PROJECT_NAME}_django
    container_name: flower${COMPOSE_PROJECT_NAME}
    depends_on:
      - celerybeat
    command: /start-flower

  minio:
    image: quay.io/minio/minio
    environment:
      - MINIO_ROOT_USER=${DJANGO_AWS_ACCESS_KEY_ID}
      - MINIO_ROOT_PASSWORD=${DJANGO_AWS_SECRET_ACCESS_KEY}
    entrypoint: /bin/bash
    command: -c 'minio server /data --console-address ":9001"'
    volumes:
      - minio-data:/data
    healthcheck:
      test: "curl -I http://localhost:9000/minio/health/live"


volumes:
  traefik: null
  db-data: null
  db-backups: null
  minio-data: null
