version: "3"

volumes:
  db-data: null
  db-backups: null
  minio-data: null

services:
  mailhog:
    image: mailhog/mailhog:v1.0.0
    container_name: mailhog
    ports:
      - "${MAILHOG_PORT}:8025"

  django: &django
    build:
      context: .
      dockerfile: ./docker/dev/Dockerfile
    image: django
    container_name: django
    platform: linux/x86_64
    depends_on:
      - postgres
      - redis
      - minio-init
      - django-init
      - mailhog
    volumes:
      - .:/app:z
      - ./geodata:/qgis:z
    env_file:
      - .env
    ports:
      - "${DJANGO_PORT}:8000"
      - 9999:9999
    command: /start

  postgres:
    image: kartoza/postgis:${POSTGRES_MAJOR_VERSION}-${POSTGIS_MAJOR_VERSION}.${POSTGIS_MINOR_RELEASE}
    volumes:
      - db-data:/var/lib/postgresql
      - db-backups:/backups
    env_file:
      - .env
    # ports:
    #   - ${POSTGRES_PORT}:5432
    restart: on-failure
    healthcheck:
      test: "exit 0"

  dbbackups:
    image: kartoza/pg-backup:${POSTGRES_MAJOR_VERSION}-${POSTGIS_MAJOR_VERSION}.${POSTGIS_MINOR_RELEASE}
    hostname: pg-backups
    volumes:
      - db-backups:/backups
    environment:
      - DUMPPREFIX=PG_db
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASS=${POSTGRES_PASS}
      - POSTGRES_PORT=${POSTGRES_SERVICE_PORT}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DBNAME=${POSTGRES_DB}
      - REMOVE_BEFORE=30
    restart: on-failure
    depends_on:
      postgres:
        condition: service_healthy

  redis:
    image: redis:6
    container_name: redis

  celeryworker:
    <<: *django
    image: celeryworker
    container_name: celeryworker
    depends_on:
      - redis
      - postgres
      - mailhog
    ports: []
    volumes:
      - ./geodata:/qgis:z
    command: /start-celeryworker
    # deploy:
    #   mode: replicated
    #   replicas: 2

  celerybeat:
    <<: *django
    image: celerybeat
    container_name: celerybeat
    depends_on:
      - redis
      - postgres
      - mailhog
      - django
    ports: []
    command: /start-celerybeat
    restart: unless-stopped

  flower:
    <<: *django
    image: flower
    container_name: flower
    depends_on:
      - celerybeat
    ports:
      - "${FLOWER_PORT}:${FLOWER_PORT}"
    command: /start-flower

  minio:
    image: quay.io/minio/minio
    environment:
      - MINIO_ROOT_USER=${DJANGO_AWS_ACCESS_KEY_ID}
      - MINIO_ROOT_PASSWORD=${DJANGO_AWS_SECRET_ACCESS_KEY}
    entrypoint: /bin/bash
    command: -c 'minio server /data --console-address ":9001"'
    volumes:
      - minio-data:/data
    ports:
      - "${MINIO_API_PORT}:9000"
      - "${MINIO_CONSOLE_PORT}:9001"

  docs:
    image: docs
    container_name: docs
    platform: linux/x86_64
    build:
      context: .
      dockerfile: ./docker/docs/Dockerfile
    env_file:
      - .env
    volumes:
      - ./docs:/docs:z
      - ./config:/app/config:z
      - ./geodata_mart:/app/geodata_mart:z
    ports:
      - "${DOCS_PORT}:9000"
    command: /start-docs

  # Ops - Once off bootstrapping operations for system initialization
  minio-init:
    container_name: minio-init
    image: quay.io/minio/mc
    entrypoint: /bin/bash
    command:
      - -c
      - >
        set -o errexit; set -o nounset;
        /usr/bin/mc config host add gdm ${DJANGO_AWS_S3_CUSTOM_DOMAIN}
        ${DJANGO_AWS_ACCESS_KEY_ID} ${DJANGO_AWS_SECRET_ACCESS_KEY};
        /usr/bin/mc mb gdm/${DJANGO_AWS_STORAGE_BUCKET_NAME};
        exit 0
    depends_on:
      - minio

  django-init:
    <<: *django
    container_name: django-init
    image: django-init
    entrypoint: /bin/bash
    environment:
      CELERY_BROKER_URL: ${REDIS_URL}"
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASS}@${POSTGRES_HOST}:${POSTGRES_SERVICE_PORT}/${POSTGRES_DB}
    command:
      - -c
      - >
        set -o errexit; set -o nounset;
        export DATABASE_URL="postgres://${POSTGRES_USER}:${POSTGRES_PASS}@${POSTGRES_HOST}:${POSTGRES_SERVICE_PORT}/${POSTGRES_DB}";
        export CELERY_BROKER_URL="${REDIS_URL}";
        python /app/manage.py makemigrations;
        python /app/manage.py migrate;
        python /app/manage.py createsuperuser --noinput --skip-checks;
        python /app/manage.py seed;
        exit 0;
    depends_on:
      - postgres
      - redis
      - minio-init
      - mailhog
    ports: []
